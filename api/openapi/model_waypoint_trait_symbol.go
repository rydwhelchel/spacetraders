/*
SpaceTraders API

SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   

API version: 2.0.0
Contact: joel@spacetraders.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WaypointTraitSymbol The unique identifier of the trait.
type WaypointTraitSymbol string

// List of WaypointTraitSymbol
const (
	UNCHARTED WaypointTraitSymbol = "UNCHARTED"
	UNDER_CONSTRUCTION WaypointTraitSymbol = "UNDER_CONSTRUCTION"
	MARKETPLACE WaypointTraitSymbol = "MARKETPLACE"
	SHIPYARD WaypointTraitSymbol = "SHIPYARD"
	OUTPOST WaypointTraitSymbol = "OUTPOST"
	SCATTERED_SETTLEMENTS WaypointTraitSymbol = "SCATTERED_SETTLEMENTS"
	SPRAWLING_CITIES WaypointTraitSymbol = "SPRAWLING_CITIES"
	MEGA_STRUCTURES WaypointTraitSymbol = "MEGA_STRUCTURES"
	PIRATE_BASE WaypointTraitSymbol = "PIRATE_BASE"
	OVERCROWDED WaypointTraitSymbol = "OVERCROWDED"
	HIGH_TECH WaypointTraitSymbol = "HIGH_TECH"
	CORRUPT WaypointTraitSymbol = "CORRUPT"
	BUREAUCRATIC_WAYPOINT WaypointTraitSymbol = "BUREAUCRATIC"
	TRADING_HUB WaypointTraitSymbol = "TRADING_HUB"
	INDUSTRIAL WaypointTraitSymbol = "INDUSTRIAL"
	BLACK_MARKET WaypointTraitSymbol = "BLACK_MARKET"
	RESEARCH_FACILITY WaypointTraitSymbol = "RESEARCH_FACILITY"
	MILITARY_BASE WaypointTraitSymbol = "MILITARY_BASE"
	SURVEILLANCE_OUTPOST WaypointTraitSymbol = "SURVEILLANCE_OUTPOST"
	EXPLORATION_OUTPOST WaypointTraitSymbol = "EXPLORATION_OUTPOST"
	MINERAL_DEPOSITS WaypointTraitSymbol = "MINERAL_DEPOSITS"
	COMMON_METAL_DEPOSITS WaypointTraitSymbol = "COMMON_METAL_DEPOSITS"
	PRECIOUS_METAL_DEPOSITS WaypointTraitSymbol = "PRECIOUS_METAL_DEPOSITS"
	RARE_METAL_DEPOSITS WaypointTraitSymbol = "RARE_METAL_DEPOSITS"
	METHANE_POOLS WaypointTraitSymbol = "METHANE_POOLS"
	ICE_CRYSTALS WaypointTraitSymbol = "ICE_CRYSTALS"
	EXPLOSIVE_GASES WaypointTraitSymbol = "EXPLOSIVE_GASES"
	STRONG_MAGNETOSPHERE WaypointTraitSymbol = "STRONG_MAGNETOSPHERE"
	VIBRANT_AURORAS WaypointTraitSymbol = "VIBRANT_AURORAS"
	SALT_FLATS WaypointTraitSymbol = "SALT_FLATS"
	CANYONS WaypointTraitSymbol = "CANYONS"
	PERPETUAL_DAYLIGHT WaypointTraitSymbol = "PERPETUAL_DAYLIGHT"
	PERPETUAL_OVERCAST WaypointTraitSymbol = "PERPETUAL_OVERCAST"
	DRY_SEABEDS WaypointTraitSymbol = "DRY_SEABEDS"
	MAGMA_SEAS WaypointTraitSymbol = "MAGMA_SEAS"
	SUPERVOLCANOES WaypointTraitSymbol = "SUPERVOLCANOES"
	ASH_CLOUDS WaypointTraitSymbol = "ASH_CLOUDS"
	VAST_RUINS WaypointTraitSymbol = "VAST_RUINS"
	MUTATED_FLORA WaypointTraitSymbol = "MUTATED_FLORA"
	TERRAFORMED WaypointTraitSymbol = "TERRAFORMED"
	EXTREME_TEMPERATURES WaypointTraitSymbol = "EXTREME_TEMPERATURES"
	EXTREME_PRESSURE WaypointTraitSymbol = "EXTREME_PRESSURE"
	DIVERSE_LIFE WaypointTraitSymbol = "DIVERSE_LIFE"
	SCARCE_LIFE WaypointTraitSymbol = "SCARCE_LIFE"
	FOSSILS WaypointTraitSymbol = "FOSSILS"
	WEAK_GRAVITY WaypointTraitSymbol = "WEAK_GRAVITY"
	STRONG_GRAVITY WaypointTraitSymbol = "STRONG_GRAVITY"
	CRUSHING_GRAVITY WaypointTraitSymbol = "CRUSHING_GRAVITY"
	TOXIC_ATMOSPHERE WaypointTraitSymbol = "TOXIC_ATMOSPHERE"
	CORROSIVE_ATMOSPHERE WaypointTraitSymbol = "CORROSIVE_ATMOSPHERE"
	BREATHABLE_ATMOSPHERE WaypointTraitSymbol = "BREATHABLE_ATMOSPHERE"
	THIN_ATMOSPHERE WaypointTraitSymbol = "THIN_ATMOSPHERE"
	JOVIAN WaypointTraitSymbol = "JOVIAN"
	ROCKY WaypointTraitSymbol = "ROCKY"
	VOLCANIC WaypointTraitSymbol = "VOLCANIC"
	FROZEN WaypointTraitSymbol = "FROZEN"
	SWAMP WaypointTraitSymbol = "SWAMP"
	BARREN WaypointTraitSymbol = "BARREN"
	TEMPERATE WaypointTraitSymbol = "TEMPERATE"
	JUNGLE WaypointTraitSymbol = "JUNGLE"
	OCEAN WaypointTraitSymbol = "OCEAN"
	RADIOACTIVE WaypointTraitSymbol = "RADIOACTIVE"
	MICRO_GRAVITY_ANOMALIES WaypointTraitSymbol = "MICRO_GRAVITY_ANOMALIES"
	DEBRIS_CLUSTER WaypointTraitSymbol = "DEBRIS_CLUSTER"
	DEEP_CRATERS WaypointTraitSymbol = "DEEP_CRATERS"
	SHALLOW_CRATERS WaypointTraitSymbol = "SHALLOW_CRATERS"
	UNSTABLE_COMPOSITION WaypointTraitSymbol = "UNSTABLE_COMPOSITION"
	HOLLOWED_INTERIOR WaypointTraitSymbol = "HOLLOWED_INTERIOR"
	STRIPPED_WAYPOINT WaypointTraitSymbol = "STRIPPED"
)

// All allowed values of WaypointTraitSymbol enum
var AllowedWaypointTraitSymbolEnumValues = []WaypointTraitSymbol{
	"UNCHARTED",
	"UNDER_CONSTRUCTION",
	"MARKETPLACE",
	"SHIPYARD",
	"OUTPOST",
	"SCATTERED_SETTLEMENTS",
	"SPRAWLING_CITIES",
	"MEGA_STRUCTURES",
	"PIRATE_BASE",
	"OVERCROWDED",
	"HIGH_TECH",
	"CORRUPT",
	"BUREAUCRATIC",
	"TRADING_HUB",
	"INDUSTRIAL",
	"BLACK_MARKET",
	"RESEARCH_FACILITY",
	"MILITARY_BASE",
	"SURVEILLANCE_OUTPOST",
	"EXPLORATION_OUTPOST",
	"MINERAL_DEPOSITS",
	"COMMON_METAL_DEPOSITS",
	"PRECIOUS_METAL_DEPOSITS",
	"RARE_METAL_DEPOSITS",
	"METHANE_POOLS",
	"ICE_CRYSTALS",
	"EXPLOSIVE_GASES",
	"STRONG_MAGNETOSPHERE",
	"VIBRANT_AURORAS",
	"SALT_FLATS",
	"CANYONS",
	"PERPETUAL_DAYLIGHT",
	"PERPETUAL_OVERCAST",
	"DRY_SEABEDS",
	"MAGMA_SEAS",
	"SUPERVOLCANOES",
	"ASH_CLOUDS",
	"VAST_RUINS",
	"MUTATED_FLORA",
	"TERRAFORMED",
	"EXTREME_TEMPERATURES",
	"EXTREME_PRESSURE",
	"DIVERSE_LIFE",
	"SCARCE_LIFE",
	"FOSSILS",
	"WEAK_GRAVITY",
	"STRONG_GRAVITY",
	"CRUSHING_GRAVITY",
	"TOXIC_ATMOSPHERE",
	"CORROSIVE_ATMOSPHERE",
	"BREATHABLE_ATMOSPHERE",
	"THIN_ATMOSPHERE",
	"JOVIAN",
	"ROCKY",
	"VOLCANIC",
	"FROZEN",
	"SWAMP",
	"BARREN",
	"TEMPERATE",
	"JUNGLE",
	"OCEAN",
	"RADIOACTIVE",
	"MICRO_GRAVITY_ANOMALIES",
	"DEBRIS_CLUSTER",
	"DEEP_CRATERS",
	"SHALLOW_CRATERS",
	"UNSTABLE_COMPOSITION",
	"HOLLOWED_INTERIOR",
	"STRIPPED",
}

func (v *WaypointTraitSymbol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WaypointTraitSymbol(value)
	for _, existing := range AllowedWaypointTraitSymbolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WaypointTraitSymbol", value)
}

// NewWaypointTraitSymbolFromValue returns a pointer to a valid WaypointTraitSymbol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWaypointTraitSymbolFromValue(v string) (*WaypointTraitSymbol, error) {
	ev := WaypointTraitSymbol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WaypointTraitSymbol: valid values are %v", v, AllowedWaypointTraitSymbolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WaypointTraitSymbol) IsValid() bool {
	for _, existing := range AllowedWaypointTraitSymbolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WaypointTraitSymbol value
func (v WaypointTraitSymbol) Ptr() *WaypointTraitSymbol {
	return &v
}

type NullableWaypointTraitSymbol struct {
	value *WaypointTraitSymbol
	isSet bool
}

func (v NullableWaypointTraitSymbol) Get() *WaypointTraitSymbol {
	return v.value
}

func (v *NullableWaypointTraitSymbol) Set(val *WaypointTraitSymbol) {
	v.value = val
	v.isSet = true
}

func (v NullableWaypointTraitSymbol) IsSet() bool {
	return v.isSet
}

func (v *NullableWaypointTraitSymbol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWaypointTraitSymbol(val *WaypointTraitSymbol) *NullableWaypointTraitSymbol {
	return &NullableWaypointTraitSymbol{value: val, isSet: true}
}

func (v NullableWaypointTraitSymbol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWaypointTraitSymbol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

