/*
SpaceTraders API

SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   

API version: 2.0.0
Contact: joel@spacetraders.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FactionTraitSymbol The unique identifier of the trait.
type FactionTraitSymbol string

// List of FactionTraitSymbol
const (
	BUREAUCRATIC_FACTION FactionTraitSymbol = "BUREAUCRATIC"
	SECRETIVE FactionTraitSymbol = "SECRETIVE"
	CAPITALISTIC FactionTraitSymbol = "CAPITALISTIC"
	INDUSTRIOUS FactionTraitSymbol = "INDUSTRIOUS"
	PEACEFUL FactionTraitSymbol = "PEACEFUL"
	DISTRUSTFUL FactionTraitSymbol = "DISTRUSTFUL"
	WELCOMING FactionTraitSymbol = "WELCOMING"
	SMUGGLERS FactionTraitSymbol = "SMUGGLERS"
	SCAVENGERS FactionTraitSymbol = "SCAVENGERS"
	REBELLIOUS FactionTraitSymbol = "REBELLIOUS"
	EXILES FactionTraitSymbol = "EXILES"
	PIRATES FactionTraitSymbol = "PIRATES"
	RAIDERS FactionTraitSymbol = "RAIDERS"
	CLAN FactionTraitSymbol = "CLAN"
	GUILD FactionTraitSymbol = "GUILD"
	DOMINION_FACTION FactionTraitSymbol = "DOMINION"
	FRINGE FactionTraitSymbol = "FRINGE"
	FORSAKEN FactionTraitSymbol = "FORSAKEN"
	ISOLATED FactionTraitSymbol = "ISOLATED"
	LOCALIZED FactionTraitSymbol = "LOCALIZED"
	ESTABLISHED FactionTraitSymbol = "ESTABLISHED"
	NOTABLE FactionTraitSymbol = "NOTABLE"
	DOMINANT FactionTraitSymbol = "DOMINANT"
	INESCAPABLE FactionTraitSymbol = "INESCAPABLE"
	INNOVATIVE FactionTraitSymbol = "INNOVATIVE"
	BOLD FactionTraitSymbol = "BOLD"
	VISIONARY FactionTraitSymbol = "VISIONARY"
	CURIOUS FactionTraitSymbol = "CURIOUS"
	DARING FactionTraitSymbol = "DARING"
	EXPLORATORY FactionTraitSymbol = "EXPLORATORY"
	RESOURCEFUL FactionTraitSymbol = "RESOURCEFUL"
	FLEXIBLE FactionTraitSymbol = "FLEXIBLE"
	COOPERATIVE FactionTraitSymbol = "COOPERATIVE"
	UNITED_FACTION FactionTraitSymbol = "UNITED"
	STRATEGIC FactionTraitSymbol = "STRATEGIC"
	INTELLIGENT FactionTraitSymbol = "INTELLIGENT"
	RESEARCH_FOCUSED FactionTraitSymbol = "RESEARCH_FOCUSED"
	COLLABORATIVE FactionTraitSymbol = "COLLABORATIVE"
	PROGRESSIVE FactionTraitSymbol = "PROGRESSIVE"
	MILITARISTIC FactionTraitSymbol = "MILITARISTIC"
	TECHNOLOGICALLY_ADVANCED FactionTraitSymbol = "TECHNOLOGICALLY_ADVANCED"
	AGGRESSIVE FactionTraitSymbol = "AGGRESSIVE"
	IMPERIALISTIC FactionTraitSymbol = "IMPERIALISTIC"
	TREASURE_HUNTERS FactionTraitSymbol = "TREASURE_HUNTERS"
	DEXTEROUS FactionTraitSymbol = "DEXTEROUS"
	UNPREDICTABLE FactionTraitSymbol = "UNPREDICTABLE"
	BRUTAL FactionTraitSymbol = "BRUTAL"
	FLEETING FactionTraitSymbol = "FLEETING"
	ADAPTABLE FactionTraitSymbol = "ADAPTABLE"
	SELF_SUFFICIENT FactionTraitSymbol = "SELF_SUFFICIENT"
	DEFENSIVE FactionTraitSymbol = "DEFENSIVE"
	PROUD FactionTraitSymbol = "PROUD"
	DIVERSE FactionTraitSymbol = "DIVERSE"
	INDEPENDENT FactionTraitSymbol = "INDEPENDENT"
	SELF_INTERESTED FactionTraitSymbol = "SELF_INTERESTED"
	FRAGMENTED FactionTraitSymbol = "FRAGMENTED"
	COMMERCIAL FactionTraitSymbol = "COMMERCIAL"
	FREE_MARKETS FactionTraitSymbol = "FREE_MARKETS"
	ENTREPRENEURIAL FactionTraitSymbol = "ENTREPRENEURIAL"
)

// All allowed values of FactionTraitSymbol enum
var AllowedFactionTraitSymbolEnumValues = []FactionTraitSymbol{
	"BUREAUCRATIC",
	"SECRETIVE",
	"CAPITALISTIC",
	"INDUSTRIOUS",
	"PEACEFUL",
	"DISTRUSTFUL",
	"WELCOMING",
	"SMUGGLERS",
	"SCAVENGERS",
	"REBELLIOUS",
	"EXILES",
	"PIRATES",
	"RAIDERS",
	"CLAN",
	"GUILD",
	"DOMINION",
	"FRINGE",
	"FORSAKEN",
	"ISOLATED",
	"LOCALIZED",
	"ESTABLISHED",
	"NOTABLE",
	"DOMINANT",
	"INESCAPABLE",
	"INNOVATIVE",
	"BOLD",
	"VISIONARY",
	"CURIOUS",
	"DARING",
	"EXPLORATORY",
	"RESOURCEFUL",
	"FLEXIBLE",
	"COOPERATIVE",
	"UNITED",
	"STRATEGIC",
	"INTELLIGENT",
	"RESEARCH_FOCUSED",
	"COLLABORATIVE",
	"PROGRESSIVE",
	"MILITARISTIC",
	"TECHNOLOGICALLY_ADVANCED",
	"AGGRESSIVE",
	"IMPERIALISTIC",
	"TREASURE_HUNTERS",
	"DEXTEROUS",
	"UNPREDICTABLE",
	"BRUTAL",
	"FLEETING",
	"ADAPTABLE",
	"SELF_SUFFICIENT",
	"DEFENSIVE",
	"PROUD",
	"DIVERSE",
	"INDEPENDENT",
	"SELF_INTERESTED",
	"FRAGMENTED",
	"COMMERCIAL",
	"FREE_MARKETS",
	"ENTREPRENEURIAL",
}

func (v *FactionTraitSymbol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FactionTraitSymbol(value)
	for _, existing := range AllowedFactionTraitSymbolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FactionTraitSymbol", value)
}

// NewFactionTraitSymbolFromValue returns a pointer to a valid FactionTraitSymbol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFactionTraitSymbolFromValue(v string) (*FactionTraitSymbol, error) {
	ev := FactionTraitSymbol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FactionTraitSymbol: valid values are %v", v, AllowedFactionTraitSymbolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FactionTraitSymbol) IsValid() bool {
	for _, existing := range AllowedFactionTraitSymbolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FactionTraitSymbol value
func (v FactionTraitSymbol) Ptr() *FactionTraitSymbol {
	return &v
}

type NullableFactionTraitSymbol struct {
	value *FactionTraitSymbol
	isSet bool
}

func (v NullableFactionTraitSymbol) Get() *FactionTraitSymbol {
	return v.value
}

func (v *NullableFactionTraitSymbol) Set(val *FactionTraitSymbol) {
	v.value = val
	v.isSet = true
}

func (v NullableFactionTraitSymbol) IsSet() bool {
	return v.isSet
}

func (v *NullableFactionTraitSymbol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFactionTraitSymbol(val *FactionTraitSymbol) *NullableFactionTraitSymbol {
	return &NullableFactionTraitSymbol{value: val, isSet: true}
}

func (v NullableFactionTraitSymbol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFactionTraitSymbol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

