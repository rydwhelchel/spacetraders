/*
SpaceTraders API

SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   

API version: 2.0.0
Contact: joel@spacetraders.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TradeSymbol The good's symbol.
type TradeSymbol string

// List of TradeSymbol
const (
	PRECIOUS_STONES TradeSymbol = "PRECIOUS_STONES"
	QUARTZ_SAND TradeSymbol = "QUARTZ_SAND"
	SILICON_CRYSTALS TradeSymbol = "SILICON_CRYSTALS"
	AMMONIA_ICE TradeSymbol = "AMMONIA_ICE"
	LIQUID_HYDROGEN TradeSymbol = "LIQUID_HYDROGEN"
	LIQUID_NITROGEN TradeSymbol = "LIQUID_NITROGEN"
	ICE_WATER TradeSymbol = "ICE_WATER"
	EXOTIC_MATTER TradeSymbol = "EXOTIC_MATTER"
	ADVANCED_CIRCUITRY TradeSymbol = "ADVANCED_CIRCUITRY"
	GRAVITON_EMITTERS TradeSymbol = "GRAVITON_EMITTERS"
	IRON TradeSymbol = "IRON"
	IRON_ORE TradeSymbol = "IRON_ORE"
	COPPER TradeSymbol = "COPPER"
	COPPER_ORE TradeSymbol = "COPPER_ORE"
	ALUMINUM TradeSymbol = "ALUMINUM"
	ALUMINUM_ORE TradeSymbol = "ALUMINUM_ORE"
	SILVER TradeSymbol = "SILVER"
	SILVER_ORE TradeSymbol = "SILVER_ORE"
	GOLD TradeSymbol = "GOLD"
	GOLD_ORE TradeSymbol = "GOLD_ORE"
	PLATINUM TradeSymbol = "PLATINUM"
	PLATINUM_ORE TradeSymbol = "PLATINUM_ORE"
	DIAMONDS TradeSymbol = "DIAMONDS"
	URANITE TradeSymbol = "URANITE"
	URANITE_ORE TradeSymbol = "URANITE_ORE"
	MERITIUM TradeSymbol = "MERITIUM"
	MERITIUM_ORE TradeSymbol = "MERITIUM_ORE"
	HYDROCARBON TradeSymbol = "HYDROCARBON"
	ANTIMATTER TradeSymbol = "ANTIMATTER"
	FAB_MATS TradeSymbol = "FAB_MATS"
	FERTILIZERS TradeSymbol = "FERTILIZERS"
	FABRICS TradeSymbol = "FABRICS"
	FOOD TradeSymbol = "FOOD"
	JEWELRY TradeSymbol = "JEWELRY"
	MACHINERY TradeSymbol = "MACHINERY"
	FIREARMS TradeSymbol = "FIREARMS"
	ASSAULT_RIFLES TradeSymbol = "ASSAULT_RIFLES"
	MILITARY_EQUIPMENT TradeSymbol = "MILITARY_EQUIPMENT"
	EXPLOSIVES TradeSymbol = "EXPLOSIVES"
	LAB_INSTRUMENTS TradeSymbol = "LAB_INSTRUMENTS"
	AMMUNITION TradeSymbol = "AMMUNITION"
	ELECTRONICS TradeSymbol = "ELECTRONICS"
	SHIP_PLATING TradeSymbol = "SHIP_PLATING"
	SHIP_PARTS TradeSymbol = "SHIP_PARTS"
	EQUIPMENT TradeSymbol = "EQUIPMENT"
	FUEL TradeSymbol = "FUEL"
	MEDICINE TradeSymbol = "MEDICINE"
	DRUGS TradeSymbol = "DRUGS"
	CLOTHING TradeSymbol = "CLOTHING"
	MICROPROCESSORS TradeSymbol = "MICROPROCESSORS"
	PLASTICS TradeSymbol = "PLASTICS"
	POLYNUCLEOTIDES TradeSymbol = "POLYNUCLEOTIDES"
	BIOCOMPOSITES TradeSymbol = "BIOCOMPOSITES"
	QUANTUM_STABILIZERS TradeSymbol = "QUANTUM_STABILIZERS"
	NANOBOTS TradeSymbol = "NANOBOTS"
	AI_MAINFRAMES TradeSymbol = "AI_MAINFRAMES"
	QUANTUM_DRIVES TradeSymbol = "QUANTUM_DRIVES"
	ROBOTIC_DRONES TradeSymbol = "ROBOTIC_DRONES"
	CYBER_IMPLANTS TradeSymbol = "CYBER_IMPLANTS"
	GENE_THERAPEUTICS TradeSymbol = "GENE_THERAPEUTICS"
	NEURAL_CHIPS TradeSymbol = "NEURAL_CHIPS"
	MOOD_REGULATORS TradeSymbol = "MOOD_REGULATORS"
	VIRAL_AGENTS TradeSymbol = "VIRAL_AGENTS"
	MICRO_FUSION_GENERATORS TradeSymbol = "MICRO_FUSION_GENERATORS"
	SUPERGRAINS TradeSymbol = "SUPERGRAINS"
	LASER_RIFLES TradeSymbol = "LASER_RIFLES"
	HOLOGRAPHICS TradeSymbol = "HOLOGRAPHICS"
	SHIP_SALVAGE TradeSymbol = "SHIP_SALVAGE"
	RELIC_TECH TradeSymbol = "RELIC_TECH"
	NOVEL_LIFEFORMS TradeSymbol = "NOVEL_LIFEFORMS"
	BOTANICAL_SPECIMENS TradeSymbol = "BOTANICAL_SPECIMENS"
	CULTURAL_ARTIFACTS TradeSymbol = "CULTURAL_ARTIFACTS"
	FRAME_PROBE TradeSymbol = "FRAME_PROBE"
	FRAME_DRONE TradeSymbol = "FRAME_DRONE"
	FRAME_INTERCEPTOR TradeSymbol = "FRAME_INTERCEPTOR"
	FRAME_RACER TradeSymbol = "FRAME_RACER"
	FRAME_FIGHTER TradeSymbol = "FRAME_FIGHTER"
	FRAME_FRIGATE TradeSymbol = "FRAME_FRIGATE"
	FRAME_SHUTTLE TradeSymbol = "FRAME_SHUTTLE"
	FRAME_EXPLORER TradeSymbol = "FRAME_EXPLORER"
	FRAME_MINER TradeSymbol = "FRAME_MINER"
	FRAME_LIGHT_FREIGHTER TradeSymbol = "FRAME_LIGHT_FREIGHTER"
	FRAME_HEAVY_FREIGHTER TradeSymbol = "FRAME_HEAVY_FREIGHTER"
	FRAME_TRANSPORT TradeSymbol = "FRAME_TRANSPORT"
	FRAME_DESTROYER TradeSymbol = "FRAME_DESTROYER"
	FRAME_CRUISER TradeSymbol = "FRAME_CRUISER"
	FRAME_CARRIER TradeSymbol = "FRAME_CARRIER"
	REACTOR_SOLAR_I TradeSymbol = "REACTOR_SOLAR_I"
	REACTOR_FUSION_I TradeSymbol = "REACTOR_FUSION_I"
	REACTOR_FISSION_I TradeSymbol = "REACTOR_FISSION_I"
	REACTOR_CHEMICAL_I TradeSymbol = "REACTOR_CHEMICAL_I"
	REACTOR_ANTIMATTER_I TradeSymbol = "REACTOR_ANTIMATTER_I"
	ENGINE_IMPULSE_DRIVE_I TradeSymbol = "ENGINE_IMPULSE_DRIVE_I"
	ENGINE_ION_DRIVE_I TradeSymbol = "ENGINE_ION_DRIVE_I"
	ENGINE_ION_DRIVE_II TradeSymbol = "ENGINE_ION_DRIVE_II"
	ENGINE_HYPER_DRIVE_I TradeSymbol = "ENGINE_HYPER_DRIVE_I"
	MODULE_MINERAL_PROCESSOR_I TradeSymbol = "MODULE_MINERAL_PROCESSOR_I"
	MODULE_GAS_PROCESSOR_I TradeSymbol = "MODULE_GAS_PROCESSOR_I"
	MODULE_CARGO_HOLD_I TradeSymbol = "MODULE_CARGO_HOLD_I"
	MODULE_CARGO_HOLD_II TradeSymbol = "MODULE_CARGO_HOLD_II"
	MODULE_CARGO_HOLD_III TradeSymbol = "MODULE_CARGO_HOLD_III"
	MODULE_CREW_QUARTERS_I TradeSymbol = "MODULE_CREW_QUARTERS_I"
	MODULE_ENVOY_QUARTERS_I TradeSymbol = "MODULE_ENVOY_QUARTERS_I"
	MODULE_PASSENGER_CABIN_I TradeSymbol = "MODULE_PASSENGER_CABIN_I"
	MODULE_MICRO_REFINERY_I TradeSymbol = "MODULE_MICRO_REFINERY_I"
	MODULE_SCIENCE_LAB_I TradeSymbol = "MODULE_SCIENCE_LAB_I"
	MODULE_JUMP_DRIVE_I TradeSymbol = "MODULE_JUMP_DRIVE_I"
	MODULE_JUMP_DRIVE_II TradeSymbol = "MODULE_JUMP_DRIVE_II"
	MODULE_JUMP_DRIVE_III TradeSymbol = "MODULE_JUMP_DRIVE_III"
	MODULE_WARP_DRIVE_I TradeSymbol = "MODULE_WARP_DRIVE_I"
	MODULE_WARP_DRIVE_II TradeSymbol = "MODULE_WARP_DRIVE_II"
	MODULE_WARP_DRIVE_III TradeSymbol = "MODULE_WARP_DRIVE_III"
	MODULE_SHIELD_GENERATOR_I TradeSymbol = "MODULE_SHIELD_GENERATOR_I"
	MODULE_SHIELD_GENERATOR_II TradeSymbol = "MODULE_SHIELD_GENERATOR_II"
	MODULE_ORE_REFINERY_I TradeSymbol = "MODULE_ORE_REFINERY_I"
	MODULE_FUEL_REFINERY_I TradeSymbol = "MODULE_FUEL_REFINERY_I"
	MOUNT_GAS_SIPHON_I TradeSymbol = "MOUNT_GAS_SIPHON_I"
	MOUNT_GAS_SIPHON_II TradeSymbol = "MOUNT_GAS_SIPHON_II"
	MOUNT_GAS_SIPHON_III TradeSymbol = "MOUNT_GAS_SIPHON_III"
	MOUNT_SURVEYOR_I TradeSymbol = "MOUNT_SURVEYOR_I"
	MOUNT_SURVEYOR_II TradeSymbol = "MOUNT_SURVEYOR_II"
	MOUNT_SURVEYOR_III TradeSymbol = "MOUNT_SURVEYOR_III"
	MOUNT_SENSOR_ARRAY_I TradeSymbol = "MOUNT_SENSOR_ARRAY_I"
	MOUNT_SENSOR_ARRAY_II TradeSymbol = "MOUNT_SENSOR_ARRAY_II"
	MOUNT_SENSOR_ARRAY_III TradeSymbol = "MOUNT_SENSOR_ARRAY_III"
	MOUNT_MINING_LASER_I TradeSymbol = "MOUNT_MINING_LASER_I"
	MOUNT_MINING_LASER_II TradeSymbol = "MOUNT_MINING_LASER_II"
	MOUNT_MINING_LASER_III TradeSymbol = "MOUNT_MINING_LASER_III"
	MOUNT_LASER_CANNON_I TradeSymbol = "MOUNT_LASER_CANNON_I"
	MOUNT_MISSILE_LAUNCHER_I TradeSymbol = "MOUNT_MISSILE_LAUNCHER_I"
	MOUNT_TURRET_I TradeSymbol = "MOUNT_TURRET_I"
	SHIP_PROBE TradeSymbol = "SHIP_PROBE"
	SHIP_MINING_DRONE TradeSymbol = "SHIP_MINING_DRONE"
	SHIP_SIPHON_DRONE TradeSymbol = "SHIP_SIPHON_DRONE"
	SHIP_INTERCEPTOR TradeSymbol = "SHIP_INTERCEPTOR"
	SHIP_LIGHT_HAULER TradeSymbol = "SHIP_LIGHT_HAULER"
	SHIP_COMMAND_FRIGATE TradeSymbol = "SHIP_COMMAND_FRIGATE"
	SHIP_EXPLORER TradeSymbol = "SHIP_EXPLORER"
	SHIP_HEAVY_FREIGHTER TradeSymbol = "SHIP_HEAVY_FREIGHTER"
	SHIP_LIGHT_SHUTTLE TradeSymbol = "SHIP_LIGHT_SHUTTLE"
	SHIP_ORE_HOUND TradeSymbol = "SHIP_ORE_HOUND"
	SHIP_REFINING_FREIGHTER TradeSymbol = "SHIP_REFINING_FREIGHTER"
	SHIP_SURVEYOR TradeSymbol = "SHIP_SURVEYOR"
)

// All allowed values of TradeSymbol enum
var AllowedTradeSymbolEnumValues = []TradeSymbol{
	"PRECIOUS_STONES",
	"QUARTZ_SAND",
	"SILICON_CRYSTALS",
	"AMMONIA_ICE",
	"LIQUID_HYDROGEN",
	"LIQUID_NITROGEN",
	"ICE_WATER",
	"EXOTIC_MATTER",
	"ADVANCED_CIRCUITRY",
	"GRAVITON_EMITTERS",
	"IRON",
	"IRON_ORE",
	"COPPER",
	"COPPER_ORE",
	"ALUMINUM",
	"ALUMINUM_ORE",
	"SILVER",
	"SILVER_ORE",
	"GOLD",
	"GOLD_ORE",
	"PLATINUM",
	"PLATINUM_ORE",
	"DIAMONDS",
	"URANITE",
	"URANITE_ORE",
	"MERITIUM",
	"MERITIUM_ORE",
	"HYDROCARBON",
	"ANTIMATTER",
	"FAB_MATS",
	"FERTILIZERS",
	"FABRICS",
	"FOOD",
	"JEWELRY",
	"MACHINERY",
	"FIREARMS",
	"ASSAULT_RIFLES",
	"MILITARY_EQUIPMENT",
	"EXPLOSIVES",
	"LAB_INSTRUMENTS",
	"AMMUNITION",
	"ELECTRONICS",
	"SHIP_PLATING",
	"SHIP_PARTS",
	"EQUIPMENT",
	"FUEL",
	"MEDICINE",
	"DRUGS",
	"CLOTHING",
	"MICROPROCESSORS",
	"PLASTICS",
	"POLYNUCLEOTIDES",
	"BIOCOMPOSITES",
	"QUANTUM_STABILIZERS",
	"NANOBOTS",
	"AI_MAINFRAMES",
	"QUANTUM_DRIVES",
	"ROBOTIC_DRONES",
	"CYBER_IMPLANTS",
	"GENE_THERAPEUTICS",
	"NEURAL_CHIPS",
	"MOOD_REGULATORS",
	"VIRAL_AGENTS",
	"MICRO_FUSION_GENERATORS",
	"SUPERGRAINS",
	"LASER_RIFLES",
	"HOLOGRAPHICS",
	"SHIP_SALVAGE",
	"RELIC_TECH",
	"NOVEL_LIFEFORMS",
	"BOTANICAL_SPECIMENS",
	"CULTURAL_ARTIFACTS",
	"FRAME_PROBE",
	"FRAME_DRONE",
	"FRAME_INTERCEPTOR",
	"FRAME_RACER",
	"FRAME_FIGHTER",
	"FRAME_FRIGATE",
	"FRAME_SHUTTLE",
	"FRAME_EXPLORER",
	"FRAME_MINER",
	"FRAME_LIGHT_FREIGHTER",
	"FRAME_HEAVY_FREIGHTER",
	"FRAME_TRANSPORT",
	"FRAME_DESTROYER",
	"FRAME_CRUISER",
	"FRAME_CARRIER",
	"REACTOR_SOLAR_I",
	"REACTOR_FUSION_I",
	"REACTOR_FISSION_I",
	"REACTOR_CHEMICAL_I",
	"REACTOR_ANTIMATTER_I",
	"ENGINE_IMPULSE_DRIVE_I",
	"ENGINE_ION_DRIVE_I",
	"ENGINE_ION_DRIVE_II",
	"ENGINE_HYPER_DRIVE_I",
	"MODULE_MINERAL_PROCESSOR_I",
	"MODULE_GAS_PROCESSOR_I",
	"MODULE_CARGO_HOLD_I",
	"MODULE_CARGO_HOLD_II",
	"MODULE_CARGO_HOLD_III",
	"MODULE_CREW_QUARTERS_I",
	"MODULE_ENVOY_QUARTERS_I",
	"MODULE_PASSENGER_CABIN_I",
	"MODULE_MICRO_REFINERY_I",
	"MODULE_SCIENCE_LAB_I",
	"MODULE_JUMP_DRIVE_I",
	"MODULE_JUMP_DRIVE_II",
	"MODULE_JUMP_DRIVE_III",
	"MODULE_WARP_DRIVE_I",
	"MODULE_WARP_DRIVE_II",
	"MODULE_WARP_DRIVE_III",
	"MODULE_SHIELD_GENERATOR_I",
	"MODULE_SHIELD_GENERATOR_II",
	"MODULE_ORE_REFINERY_I",
	"MODULE_FUEL_REFINERY_I",
	"MOUNT_GAS_SIPHON_I",
	"MOUNT_GAS_SIPHON_II",
	"MOUNT_GAS_SIPHON_III",
	"MOUNT_SURVEYOR_I",
	"MOUNT_SURVEYOR_II",
	"MOUNT_SURVEYOR_III",
	"MOUNT_SENSOR_ARRAY_I",
	"MOUNT_SENSOR_ARRAY_II",
	"MOUNT_SENSOR_ARRAY_III",
	"MOUNT_MINING_LASER_I",
	"MOUNT_MINING_LASER_II",
	"MOUNT_MINING_LASER_III",
	"MOUNT_LASER_CANNON_I",
	"MOUNT_MISSILE_LAUNCHER_I",
	"MOUNT_TURRET_I",
	"SHIP_PROBE",
	"SHIP_MINING_DRONE",
	"SHIP_SIPHON_DRONE",
	"SHIP_INTERCEPTOR",
	"SHIP_LIGHT_HAULER",
	"SHIP_COMMAND_FRIGATE",
	"SHIP_EXPLORER",
	"SHIP_HEAVY_FREIGHTER",
	"SHIP_LIGHT_SHUTTLE",
	"SHIP_ORE_HOUND",
	"SHIP_REFINING_FREIGHTER",
	"SHIP_SURVEYOR",
}

func (v *TradeSymbol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TradeSymbol(value)
	for _, existing := range AllowedTradeSymbolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TradeSymbol", value)
}

// NewTradeSymbolFromValue returns a pointer to a valid TradeSymbol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTradeSymbolFromValue(v string) (*TradeSymbol, error) {
	ev := TradeSymbol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TradeSymbol: valid values are %v", v, AllowedTradeSymbolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TradeSymbol) IsValid() bool {
	for _, existing := range AllowedTradeSymbolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TradeSymbol value
func (v TradeSymbol) Ptr() *TradeSymbol {
	return &v
}

type NullableTradeSymbol struct {
	value *TradeSymbol
	isSet bool
}

func (v NullableTradeSymbol) Get() *TradeSymbol {
	return v.value
}

func (v *NullableTradeSymbol) Set(val *TradeSymbol) {
	v.value = val
	v.isSet = true
}

func (v NullableTradeSymbol) IsSet() bool {
	return v.isSet
}

func (v *NullableTradeSymbol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradeSymbol(val *TradeSymbol) *NullableTradeSymbol {
	return &NullableTradeSymbol{value: val, isSet: true}
}

func (v NullableTradeSymbol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradeSymbol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

